services:
  wind-ingress-broker:
    image: eclipse-mosquitto:2.0
    container_name: wind-ingress-broker
    restart: unless-stopped
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./mosquitto/config/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - wind_ingress_data:/mosquitto/data
      - wind_ingress_log:/mosquitto/log

  wind-egress-broker:
    image: eclipse-mosquitto:2.0
    container_name: wind-egress-broker
    restart: unless-stopped
    ports:
      - "1884:1883"
      - "9002:9001"
    volumes:
      - ./mosquitto/config/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - wind_egress_data:/mosquitto/data
      - wind_egress_log:/mosquitto/log

  wind-internal-bus:
    image: rabbitmq:3.12-management
    container_name: wind-internal-bus
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - wind_network
    volumes:
      - wind_rabbitmq_data:/var/lib/rabbitmq/
    environment:
      - RABBITMQ_DEFAULT_USER=winduser
      - RABBITMQ_DEFAULT_PASS=windpass
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  service-discovery:
    build:
      context: ../  # O contexto agora é a raiz do projeto
      dockerfile: Dockerfile
      target: service-discovery
    container_name: service-discovery
    ports:
      - "7000:7000"
    networks:
      - wind_network
    restart: on-failure
    healthcheck:
      # Comando que o Docker executará para verificar a saúde do serviço.
      # Ele tenta acessar o endpoint /health. Se falhar, o serviço é considerado não saudável.
      test: ["CMD", "curl", "-f", "http://localhost:7000/health"]
      interval: 10s 
      timeout: 5s
      retries: 5
      start_period: 10s # Dá um tempo inicial de 10s para o serviço iniciar antes de começar os checks.

  api-gateway:
    build:
      context: ../
      dockerfile: Dockerfile
      target: api-gateway
    container_name: api-gateway
    networks:
      - wind_network
    restart: on-failure
    depends_on:
      # Espera o service-discovery ficar "saudável".
      service-discovery:
        condition: service_healthy

  application-server:
    build:
      context: ../
      dockerfile: Dockerfile
      target: application-server
    container_name: application-server
    networks:
      - wind_network
    volumes:
      - ./database_backup:/app/database
    depends_on:
      wind-internal-bus:
        condition: service_healthy
      service-discovery:
        condition: service_healthy
    restart: on-failure

  nginx:
    image: nginx:1.21
    container_name: nginx_load_balancer
    ports:
      - "80:80" # A única porta que expomos para o exterior
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - wind_network
    depends_on:
      - api-gateway
    restart: unless-stopped

networks:
  wind_network:
    driver: bridge

volumes:
  wind_ingress_data:
  wind_ingress_log:
  wind_egress_data:
  wind_egress_log:
  wind_rabbitmq_data:
